{"version":3,"sources":["types/FilterParam.ts","utils/searchHelper.ts","components/SearchLink.tsx","types/Sex.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonalLink.tsx","components/PeopleTable.tsx","api.ts","utils/filterPeople.ts","components/PeoplePage.tsx","components/HeadOfTable.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["FilterParam","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","Sex","PeopleFilters","setSearchParams","query","get","Query","centuries","getAll","Centuries","sex","handleCenturiesChange","century","includes","filter","year","className","classNames","Male","Femail","type","placeholder","onChange","event","target","map","href","Loader","PersonLink","person","slug","name","PeopleTable","people","personSlug","useParams","getParentsLink","personName","parent","find","born","died","motherName","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","filterPeople","sortField","order","tempPeople","length","Math","ceil","getCentury","lowerQuery","toLocaleLowerCase","join","sort","a","b","localeCompare","reverse","PeoplePage","setPeople","useState","loading","setLoading","hasError","setHasError","Sort","Order","visiblePeople","useEffect","peopleData","catch","finally","HeadOfTable","handleNavLinkClass","isActive","role","Navbar","App","index","element","path","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.87a8ead5.chunk.js","sourcesContent":["export enum FilterParam {\n  Centuries = 'centuries',\n  Query = 'query',\n  Sex = 'sex',\n  Sort = 'sort',\n  Order = 'order',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Sex{\n  Femail = 'f',\n  Male = 'm',\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\nimport { FilterParam } from '../types/FilterParam';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { Sex } from '../types/Sex';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleFilters: React.FC<Props> = () => {\n  const CENTURIES = ['16', '17', '18', '19', '20'];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(FilterParam.Query) || '';\n  const centuries = searchParams.getAll(FilterParam.Centuries) || [];\n  const sex = searchParams.get(FilterParam.Sex) || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(searchParams, {\n      [FilterParam.Query]: event.target.value || null,\n    }));\n  };\n\n  const handleCenturiesChange = (century: string) => {\n    return (\n      centuries.includes(century)\n        ? centuries.filter(year => year !== century)\n        : [...centuries, century]\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ [FilterParam.Sex]: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ [FilterParam.Sex]: Sex.Male }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ [FilterParam.Sex]: Sex.Femail }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={\n                  classNames('button', 'mr-1', {\n                    'is-info': centuries.includes(century),\n                  })\n                }\n                params={{\n                  [FilterParam.Centuries]: handleCenturiesChange(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <a\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              href=\"#/people\"\n            >\n              All\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            [FilterParam.Centuries]: [],\n            [FilterParam.Query]: null,\n            [FilterParam.Sex]: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { Sex } from '../types/Sex';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={classNames({\n        'has-text-danger': person.sex === Sex.Femail,\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonalLink';\nimport { Sex } from '../types/Sex';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n\n  const getParentsLink = (personName: string | null) => {\n    if (!personName) {\n      return '-';\n    }\n\n    const parent = people.find(({ name }) => name === personName);\n\n    if (parent) {\n      return <PersonLink person={parent} />;\n    }\n\n    return personName;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href=\"#/people?sort=name\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href=\"#/people?sort=sex\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href=\"#/people?sort=born&amp;order=desc\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href=\"#/people?sort=died\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      {people.map((person) => (\n        <tbody key={person.slug}>\n          <tr\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === personSlug,\n            })}\n          >\n            <td>\n              <Link\n                to={person.slug}\n                className={classNames({\n                  'has-text-danger': person.sex === Sex.Femail,\n                })}\n              >\n                {person.name}\n              </Link>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>{getParentsLink(person.motherName)}</td>\n            <td>{getParentsLink(person.fatherName)}</td>\n          </tr>\n        </tbody>\n      ))}\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const filterPeople = (\n  people: Person[],\n  sex: string | null,\n  query: string | null,\n  centuries: string[],\n  sortField: string | null,\n  order: string | null,\n) => {\n  let tempPeople = [...people];\n\n  if (sex) {\n    tempPeople = tempPeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const getCentury = (person: Person) => Math.ceil(person.born / 100);\n\n    tempPeople = tempPeople.filter(\n      person => centuries.includes(\n        getCentury(person).toString(),\n      ),\n    );\n  }\n\n  if (query) {\n    const lowerQuery = query.toLocaleLowerCase();\n\n    tempPeople = tempPeople.filter((person) => {\n      const searchableStrings = [\n        person.name,\n        person.motherName || '',\n        person.fatherName || '',\n      ];\n\n      const combinedString = searchableStrings.join(' ').toLocaleLowerCase();\n\n      return combinedString.includes(lowerQuery);\n    });\n  }\n\n  if (sortField) {\n    tempPeople.sort((a, b) => {\n      switch (sortField) {\n        case 'name':\n        case 'sex':\n          return a[sortField].localeCompare(b[sortField]);\n\n        case 'born':\n        case 'died':\n          return a[sortField] - b[sortField];\n\n        default:\n          return 0;\n      }\n    });\n\n    if (order === 'desc') {\n      tempPeople.reverse();\n    }\n  }\n\n  return tempPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { FilterParam } from '../types/FilterParam';\nimport { filterPeople } from '../utils/filterPeople';\n\ntype Props = {\n  people: Person[],\n  setPeople: (newValue: Person[]) => void,\n};\n\nexport const PeoplePage: React.FC<Props> = ({ setPeople, people }) => {\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get(FilterParam.Sex);\n  const query = searchParams.get(FilterParam.Query);\n  const centuries = searchParams.getAll(FilterParam.Centuries);\n  const sortField = searchParams.get(FilterParam.Sort);\n  const order = searchParams.get(FilterParam.Order);\n\n  const visiblePeople = filterPeople(\n    people,\n    sex,\n    query,\n    centuries,\n    sortField,\n    order,\n  );\n\n  useEffect(() => {\n    setHasError(false);\n    setLoading(true);\n\n    getPeople()\n      .then((peopleData) => {\n        setPeople(peopleData);\n      })\n      .catch(() => {\n        setHasError(true);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n\n    return () => setPeople([]);\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters people={people} />\n          </div>\n\n          <div className=\"block\">\n            <div className=\"box table-container\">\n              {loading && !hasError && !people.length && <Loader />}\n\n              {!loading && hasError && !people.length && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!loading && !hasError && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!loading && !hasError && people.length\n                && <PeopleTable people={visiblePeople} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const HeadOfTable: React.FC = () => {\n  const handleNavLinkClass = ({ isActive }: { isActive: boolean }) => {\n    return classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={handleNavLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={handleNavLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { HeadOfTable } from './HeadOfTable';\n\nexport const Navbar: React.FC = () => {\n  return (\n    <>\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <HeadOfTable />\n          </div>\n        </div>\n      </nav>\n\n      <Outlet />\n    </>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport './App.scss';\n\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { getPeople } from './api';\nimport { Person } from './types';\n\nexport const App = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople);\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route index element={<h1 className=\"title\">Home Page</h1>} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n            <Route\n              path=\"people\"\n              element={<PeoplePage people={people} setPeople={setPeople} />}\n            >\n              <Route\n                path=\":personSlug\"\n                element={<PeoplePage people={people} setPeople={setPeople} />}\n              />\n            </Route>\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}